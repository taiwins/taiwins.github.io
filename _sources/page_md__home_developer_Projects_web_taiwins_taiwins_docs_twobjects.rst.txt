.. index:: pair: page; Twobjects quick reference
.. _doxid-dc/d3e/md__home_developer__projects_web_taiwins_taiwins_docs_twobjects:

Twobjects quick reference
=========================

Twobjects is the result of migration taiwins from **libweston**, as libweston has many constrains, lacks of important features and has several severe bugs for daily users. Firstly I looked into **wlroots** and found it was not modular enough and the design did not fit the taiwins, inspired by the two prior project, I created this library for faciliting the development of the wayland compositor.



.. _doxid-dc/d3e/md__home_developer__projects_web_taiwins_taiwins_docs_twobjects_1autotoc_md57:

Features
~~~~~~~~

* twobjects implements all the interfaces in the ``wayland.xml`` and several important protocols such as ``xdg-shell`` and ``linux-dmabuf``.

* twobjects is designed to backend agnositc, you can stack it on top of other backend implementation such as wlroots.

* twobjects is designed to be autonomous. Unlike wlroots approach, which heavily exposes ``wl_signal`` from protocols so the users still has to write a layer of glue to use them. In twobjects, many of wayland protocols manages itself thus transparent to the backend developer. A good example is ``wl_data_device``.

* twobjects has built-in logging and profiling system and other utilites.





.. _doxid-dc/d3e/md__home_developer__projects_web_taiwins_taiwins_docs_twobjects_1autotoc_md58:

Building
~~~~~~~~

Install dependencies:

* meson

* wayland

* wayland-protocols

* xkbcommon

* libdrm

* pixman

Commands for build:

.. code-block:: none

	meson build
	ninja -C build

Commands for install:

.. code-block:: none

	sudo ninja -C build install





.. _doxid-dc/d3e/md__home_developer__projects_web_taiwins_taiwins_docs_twobjects_1autotoc_md59:

Getting started
~~~~~~~~~~~~~~~

Many protocols essentially implements a ``wl_global`` object like ``wl_compositor`` in the compositor, twobjects typically implements a corresponding type like ``:ref:`tw_compositor <doxid-d6/da7/structtw__compositor>```. You can create the static global by using function like ``tw_compositor_create_global`` or allocate the memory yourself then use ``tw_compositor_init``.

There are some cases where twobjects abstracts several protocols into common interface for users. For example, the ``:ref:`tw_desktop_manager <doxid-dd/d73/structtw__desktop__manager>``` implements both ``wl_shell`` and ``xdg_shell`` and exposes ``:ref:`tw_desktop_surface <doxid-d4/d0f/structtw__desktop__surface>``` for the user, this is similar to the design of libweston.

For "middle-man" protocols like ``wl_data_device``, the internals or managing ``wl_data_source``, ``wl_data_offer`` is transparent to user. Users simply initialize the ``tw_data_manager`` for getting the clipboard in wayland.





.. _doxid-dc/d3e/md__home_developer__projects_web_taiwins_taiwins_docs_twobjects_1autotoc_md60:

Twobjects utilities
~~~~~~~~~~~~~~~~~~~

Twobjects implements utilies like matrix, cursor, logging and profiling functions for users. Check out the headers for usage.

